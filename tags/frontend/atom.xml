<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>Home | Cosme - frontend</title>
	<link href="https://cosmevalera.dev/tags/frontend/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://cosmevalera.dev/"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2025-04-22T00:00:00+00:00</updated>
	<id>https://cosmevalera.dev/tags/frontend/atom.xml</id>
	<entry xml:lang="en">
		<title>Respond-To Mixin pattern (SCSS)</title>
		<published>2025-04-22T00:00:00+00:00</published>
		<updated>2025-04-22T00:00:00+00:00</updated>
		<link rel="alternate" href="https://cosmevalera.dev/blog/respond-to-mixin-pattern-scss/" type="text/html"/>
		<id>https://cosmevalera.dev/blog/respond-to-mixin-pattern-scss/</id>
		<content type="html">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;blog&#x2F;2025-04-22-respond-to-mixin-pattern-scss&#x2F;cover-webp.webp&quot; alt=&quot;blog-cover&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4&gt;&lt;b&gt;🤔 The Problem with Traditional Media Queries&lt;&#x2F;b&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Let&#x27;s be honest, we&#x27;ve all written tons of repetitive media queries in our SCSS files. It&#x27;s the same every time: copy-paste the same breakpoints over and over, hoping you didn&#x27;t miss any or mess up the values. It&#x27;s tedious, error-prone, and a real pain to maintain when your design system changes.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;b&gt;Here&#x27;s a pattern that probably looks familiar:&lt;&#x2F;b&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scss&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-scss &quot;&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;.button &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Default desktop styles
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;font-size&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1.2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;rem&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;padding&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;px &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Tablet styles
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;@media &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;max-width&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;992&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;font-size&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;rem&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;padding&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;px &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;25&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Mobile styles
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;@media &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;max-width&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;768&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;font-size&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0.9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;rem&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;padding&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;px &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This desktop-first approach with multiple &lt;code&gt;max-width&lt;&#x2F;code&gt; queries has several drawbacks:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It follows an outdated desktop-first paradigm&lt;&#x2F;li&gt;
&lt;li&gt;It lacks a standardized system for breakpoints&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h4&gt;&lt;b&gt;💡 A Better Way: The Respond-To Mixin Pattern&lt;&#x2F;b&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;The &lt;code&gt;respond-to&lt;&#x2F;code&gt; mixin creates an abstraction for media queries that makes your code more maintainable, consistent, and follows modern mobile-first principles.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;b&gt;Step 1: Define your breakpoints in a central location&lt;&#x2F;b&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scss&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-scss &quot;&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span&gt;$breakpoints: (
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;sm&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;576&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;md&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;768&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;lg&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;992&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;xl&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1200&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;px
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;b&gt;Step 2: Create the respond-to mixin&lt;&#x2F;b&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scss&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-scss &quot;&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;@mixin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;respond-to&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;$breakpoint&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;@if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;map-has-key&lt;&#x2F;span&gt;&lt;span&gt;($breakpoints, $breakpoint) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;@media &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;min-width&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;map-get&lt;&#x2F;span&gt;&lt;span&gt;($breakpoints, $breakpoint)) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;@content&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;@else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;@warn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;Breakpoint &amp;#39;#{$breakpoint}&amp;#39; not found in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;\$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;breakpoints map.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;b&gt;Step 3: Use the mixin in your components&lt;&#x2F;b&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scss&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-scss &quot;&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;.button &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Mobile-first base styles
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;font-size&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;0.9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;rem&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;padding&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;px &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Tablet styles (min-width: 768px)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;@include&lt;&#x2F;span&gt;&lt;span&gt; respond-to(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;md&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;font-size&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;rem&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;padding&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;px &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;25&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Desktop styles (min-width: 992px)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;@include&lt;&#x2F;span&gt;&lt;span&gt; respond-to(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;lg&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;font-size&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1.2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;rem&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;padding&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;px &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h4&gt;&lt;b&gt;🌟 Benefits of the Mobile-First Approach&lt;&#x2F;b&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Mobile-first has become the industry standard for responsive design because it aligns with how users access content today. With most web traffic coming from mobile devices, starting with the smallest viewport ensures optimal user experience across all screen sizes.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Benefits:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Progressive Enhancement:&lt;&#x2F;b&gt; Design for mobile first, then enhance for larger screens&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b&gt;Simplified Code:&lt;&#x2F;b&gt; Less overriding of properties across breakpoints&lt;&#x2F;li&gt;
&lt;li&gt;&lt;b&gt;Better Performance:&lt;&#x2F;b&gt; Mobile users don&#x27;t download unnecessary styles for desktop&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h4&gt;&lt;b&gt;🫠 Advanced: Desktop-First&lt;&#x2F;b&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;While mobile-first is recommended for modern development, you might occasionally need max-width queries for specific use cases. Here&#x27;s how to extend our system:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scss&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-scss &quot;&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Additional mixin for desktop first or edge cases
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;@mixin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;respond-to-max&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#fd971f;&quot;&gt;$breakpoint&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;@if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;map-has-key&lt;&#x2F;span&gt;&lt;span&gt;($breakpoints, $breakpoint) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;@media &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;max-width&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;map-get&lt;&#x2F;span&gt;&lt;span&gt;($breakpoints, $breakpoint) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;@content&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;@else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;@warn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;quot;Breakpoint &amp;#39;#{$breakpoint}&amp;#39; not found in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;\$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;breakpoints map.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;b&gt;Example use case:&lt;&#x2F;b&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scss&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-scss &quot;&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;.special-element &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Default mobile-first styles
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Only apply these styles below the &amp;#39;lg&amp;#39; breakpoint
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;@include&lt;&#x2F;span&gt;&lt;span&gt; respond-to-max(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;lg&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;display&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;none&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;b&gt;Important note:&lt;&#x2F;b&gt; You can use &lt;code&gt;respond-to-max&lt;&#x2F;code&gt; but be aware that doing so you are not following the mobile-first pattern. For most cases, stick with the mobile-first &lt;code&gt;respond-to&lt;&#x2F;code&gt; pattern for cleaner, more maintainable code.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h4&gt;&lt;b&gt;🔄 Migrate from Desktop-First to Mobile-First + respond-to&lt;&#x2F;b&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Here&#x27;s a practical guide to migrate your existing styles:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;b&gt;Before (Desktop-First):&lt;&#x2F;b&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scss&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-scss &quot;&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;.card &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Desktop default
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;display&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;flex&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;padding&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;rem&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;margin&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;rem&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Tablet
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;@media &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;max-width&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;992&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;padding&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;rem&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;margin&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;rem&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Mobile
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;@media &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;max-width&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;768&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;display&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;padding&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;rem&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;margin&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;rem&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;b&gt;After (Mobile-First with &lt;code&gt;respond-to&lt;&#x2F;code&gt;):&lt;&#x2F;b&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scss&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-scss &quot;&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span style=&quot;color:#a6e22e;&quot;&gt;.card &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Mobile default (smallest screen)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;display&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;block&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;padding&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;rem&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;margin&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;rem&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Tablet (min-width: 768px)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;@include&lt;&#x2F;span&gt;&lt;span&gt; respond-to(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;md&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;display&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#66d9ef;&quot;&gt;flex&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; 💡 Key migration point! See explanation below
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;padding&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;rem&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;margin&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;1.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;rem&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#75715e;&quot;&gt;&#x2F;&#x2F; Desktop (min-width: 992px)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;@include&lt;&#x2F;span&gt;&lt;span&gt; respond-to(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;lg&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;padding&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;rem&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#66d9ef;&quot;&gt;margin&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ae81ff;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;rem&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Remember to create the breakpoints and the &lt;code&gt;respond-to&lt;&#x2F;code&gt; mixin as stated above in &lt;code&gt;💡 A Better Way: The Respond-To Mixin Pattern&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;b&gt;Migration steps:&lt;&#x2F;b&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Move the mobile-specific styles to be the default styles (outside any media query)&lt;&#x2F;li&gt;
&lt;li&gt;Replace &lt;code&gt;max-width&lt;&#x2F;code&gt; queries with &lt;code&gt;min-width&lt;&#x2F;code&gt; using the &lt;code&gt;respond-to&lt;&#x2F;code&gt; mixin&lt;&#x2F;li&gt;
&lt;li&gt;Be careful with properties that apply across multiple breakpoints (explained in detail below)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;b&gt;Mind the Tricky Details&lt;&#x2F;b&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Look at how we moved &lt;code&gt;display: flex&lt;&#x2F;code&gt; from the desktop default to the tablet breakpoint. This is a perfect example of the functional translation required:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;In the original desktop-first code, &lt;code&gt;display: flex&lt;&#x2F;code&gt; was applied to &lt;strong&gt;both desktop and tablet&lt;&#x2F;strong&gt; (it was overridden only for mobile)&lt;&#x2F;li&gt;
&lt;li&gt;In our mobile-first version, we start with mobile styles (&lt;code&gt;display: block&lt;&#x2F;code&gt;), so &lt;code&gt;display: flex&lt;&#x2F;code&gt; needs to be applied at the tablet breakpoint to maintain the same visual outcome&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This shift isn&#x27;t just about reorganizing code. It&#x27;s about preserving the same functionality while changing our starting point. In desktop-first, you subtract complexity for smaller screens; in mobile-first, you add enhancements as screens get larger.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;!-- Visual break before conclusion - changes based on time of year --&gt;
&lt;div class=&quot;seasonal-image-container&quot;&gt;
  
  
  &lt;!-- &lt;p&gt;10&lt;&#x2F;p&gt; --&gt;
  
  
  
    
  
  
  
  
    &lt;img
      src=&quot;https:&#x2F;&#x2F;cosmevalera.dev&#x2F;images&#x2F;blog&#x2F;general&#x2F;tree-autumn-winter-webp.webp&quot; 
      alt=&quot;Autumn&amp;amp;#x2F;Winter seasonal image&quot;&gt;
  
&lt;&#x2F;div&gt; &lt;h4&gt;&lt;b&gt;Conclusion&lt;&#x2F;b&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;The &lt;code&gt;respond-to&lt;&#x2F;code&gt; mixin pattern with a mobile-first approach is a powerful technique for creating clean, maintainable responsive designs. By centralizing your breakpoints and using a standardized system for applying media queries, you&#x27;ll improve your development process and create a more consistent user experience across devices.&lt;&#x2F;p&gt;
&lt;p&gt;Give this pattern a try in your next project. I think you&#x27;ll be surprised at how much it simplifies responsive design! &lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Optimizing Microfrontends with Turborepo</title>
		<published>2024-10-04T00:00:00+00:00</published>
		<updated>2024-10-04T00:00:00+00:00</updated>
		<link rel="alternate" href="https://cosmevalera.dev/blog/optimizing-microfrontends-with-turborepo/" type="text/html"/>
		<id>https://cosmevalera.dev/blog/optimizing-microfrontends-with-turborepo/</id>
		<content type="html">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;blog&#x2F;2024-10-04-optimizing-microfrontends-with-turborepo&#x2F;cover-webp.webp&quot; alt=&quot;blog-cover&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4&gt;&lt;b&gt;🧐 Why Turborepo?&lt;&#x2F;b&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Managing multiple microfrontends within a monorepo can be challenging. Turborepo offers a powerful solution to optimize workflows, run tasks in parallel, and cache results for faster builds.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;b&gt;Parallel Tasks:&lt;&#x2F;b&gt; Run builds and tests across multiple microfrontends simultaneously.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;b&gt;Intelligent Caching:&lt;&#x2F;b&gt; Save time by reusing outputs from previous runs.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;b&gt;Scalable:&lt;&#x2F;b&gt; Manage as many microfrontends as needed, all within a single monorepo.
If you&#x27;re working with multiple apps, Turborepo is a game-changer for streamlining your workflows.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s how you can set up and use Turborepo in your project:&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h4&gt;&lt;b&gt;🔧 1. Creating a Turborepo Project&lt;&#x2F;b&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;b&gt;1.1 Create a New Turborepo Project:&lt;&#x2F;b&gt; &lt;&#x2F;p&gt;
&lt;p&gt;Instead of manually setting up Turborepo, you can use the following command to quickly scaffold a new Turborepo:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;npx create-turbo@latest
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;b&gt;1.2 Place your microfrontends inside the &lt;code&gt;apps&lt;&#x2F;code&gt; directory:&lt;&#x2F;b&gt; &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;apps&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt; ├── mfe1&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt; ├── mfe2&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt; └── mfe3&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;package.json
&lt;&#x2F;span&gt;&lt;span&gt;turbo.json
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4&gt;&lt;b&gt;📄 2. Important Configuration Files&lt;&#x2F;b&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;package.json&lt;&#x2F;code&gt; defines your scripts, dependencies, and workspace structure&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;turbo.json&lt;&#x2F;code&gt; configures how tasks are run across your monorepo. It also includes caching settings to speed up subsequent runs.&lt;&#x2F;p&gt;
&lt;h4&gt;&lt;b&gt;⚡ 3. Running Turborepo Commands&lt;&#x2F;b&gt;&lt;&#x2F;h4&gt;
After setting up Turborepo, you can easily manage all apps and packages with a few simple commands:
&lt;p&gt;&lt;b&gt;Install dependencies:&lt;&#x2F;b&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;npm i 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;b&gt;Build all apps and packages:&lt;&#x2F;b&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;npm run build 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;b&gt;Start the development environment:&lt;&#x2F;b&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;npm run dev 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Run any of these commands once, and Turborepo will use its smart caching to speed up subsequent builds.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;!-- Visual break before conclusion - changes based on time of year --&gt;
&lt;div class=&quot;seasonal-image-container&quot;&gt;
  
  
  &lt;!-- &lt;p&gt;10&lt;&#x2F;p&gt; --&gt;
  
  
  
    
  
  
  
  
    &lt;img
      src=&quot;https:&#x2F;&#x2F;cosmevalera.dev&#x2F;images&#x2F;blog&#x2F;general&#x2F;tree-autumn-winter-webp.webp&quot; 
      alt=&quot;Autumn&amp;amp;#x2F;Winter seasonal image&quot;&gt;
  
&lt;&#x2F;div&gt; 
&lt;p&gt;Give it a try in your next project and experience the efficiency firsthand! 😍😍&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Shared Styles in Monorepos</title>
		<published>2024-09-01T00:00:00+00:00</published>
		<updated>2024-09-01T00:00:00+00:00</updated>
		<link rel="alternate" href="https://cosmevalera.dev/blog/shared-styles-in-monorepo/" type="text/html"/>
		<id>https://cosmevalera.dev/blog/shared-styles-in-monorepo/</id>
		<content type="html">&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;blog&#x2F;2024-09-01-shared-styles-in-monorepo&#x2F;cover-webp.webp&quot; alt=&quot;blog-cover&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4&gt;&lt;b&gt;🤔 Overview&lt;&#x2F;b&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;In large-scale projects maintaining consistent styles across multiple applications is crucial. Here are two key approaches for managing shared styles:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;📦 Creating a shared styles library as a &lt;b&gt;npm package&lt;&#x2F;b&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;🔗 Directly importing styles from &lt;b&gt;a centralized directory&lt;&#x2F;b&gt; within the monorepo.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h4&gt;&lt;b&gt;📦 1. Creating a Styles Library with npm&lt;&#x2F;b&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;b&gt;Overview:&lt;&#x2F;b&gt; This approach involves creating a dedicated styles library that is published as a npm package. The styles can then be imported into any project that needs them.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;b&gt;Implementation:&lt;&#x2F;b&gt; For example, if you&#x27;re working with custom theme styles for PrimeReact, you can create your styles in a library and export them using an &lt;code&gt;index.js&lt;&#x2F;code&gt; file like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;module.exports = {
&lt;&#x2F;span&gt;&lt;span&gt;  theme: require(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;.&#x2F;style&#x2F;themes&#x2F;my-theme&#x2F;theme.scss&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After publishing the package, you can install it in your projects using:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;npm i my-theme
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then, simply import the styles in your main JavaScript entry point:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;my-theme&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;b&gt;Pros:&lt;&#x2F;b&gt;
Centralized version control of styles.
Easy to update and distribute across multiple projects.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;b&gt;Cons:&lt;&#x2F;b&gt;
Requires publishing and versioning with each change.&lt;&#x2F;p&gt;
&lt;h4&gt;&lt;b&gt;🔗 2. Direct Import from a Centralized Directory&lt;&#x2F;b&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;b&gt;Overview:&lt;&#x2F;b&gt; If you’re using a monorepo setup, you can store your styles in a central directory and import them directly into each project.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;b&gt;Implementation:&lt;&#x2F;b&gt; Place your styles in a folder at the root level, parallel to your apps, and import them in your projects:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#272822;color:#f8f8f2;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e6db74;&quot;&gt;&amp;#39;..&#x2F;style&#x2F;themes&#x2F;my-theme&#x2F;theme.scss&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f92672;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;b&gt;Pros:&lt;&#x2F;b&gt;
No need to publish or manage versions.
Immediate access to the latest styles without additional steps.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;b&gt;Cons:&lt;&#x2F;b&gt;
Potential for accidental breaking changes if styles are updated.
Need to have a monorepo structure; doesn&#x27;t work if the projects are split into different repositories.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;!-- Visual break before conclusion - changes based on time of year --&gt;
&lt;div class=&quot;seasonal-image-container&quot;&gt;
  
  
  &lt;!-- &lt;p&gt;10&lt;&#x2F;p&gt; --&gt;
  
  
  
    
  
  
  
  
    &lt;img
      src=&quot;https:&#x2F;&#x2F;cosmevalera.dev&#x2F;images&#x2F;blog&#x2F;general&#x2F;tree-autumn-winter-webp.webp&quot; 
      alt=&quot;Autumn&amp;amp;#x2F;Winter seasonal image&quot;&gt;
  
&lt;&#x2F;div&gt; &lt;h4&gt;&lt;b&gt;❓ What to choose&lt;&#x2F;b&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Use a &lt;b&gt;npm package&lt;&#x2F;b&gt; if you want to have strict version control or you don&#x27;t have all your projects in the same folder.&lt;&#x2F;li&gt;
&lt;li&gt;Use direct importing from &lt;b&gt;a centralized directory&lt;&#x2F;b&gt; if you prefer a simpler solution and your code structure allows it.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
</feed>
